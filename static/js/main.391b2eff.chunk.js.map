{"version":3,"sources":["components/App/App.module.scss","components/Timer/Timer.module.scss","components/ButtonClick/ButtonClick.module.scss","components/Title/Title.module.scss","components/Button/Button.module.scss","components/Count/Count.module.scss","serviceWorker.ts","components/Title/Title.tsx","components/Timer/Timer.tsx","components/ButtonClick/ButtonClick.tsx","components/Count/Count.tsx","components/Button/Button.tsx","components/App/App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Title","props","title","titleClass","s","join","spanClass","span","collectionStyleColors","handleMouseEnter","e","currentTarget","style","color","Math","floor","random","length","handleMouseLeave","titleWatching","split","map","i","inx","key","className","onMouseEnter","onMouseLeave","Timer","time","timerSClass","timer__s","timerMSClass","timer__ms","timerClass","timer","ms","push","timer__active","ButtonClick","onChangeCount","start","disabled","clickMe","useState","isClick","setIsClick","buttonClass","button","onClick","onMouseDown","Count","count","titleBoxClass","Button","stop","timeDefault","h","m","App","maxValue","setTime","setCount","interv","setInterv","active","setActive","isButtonClick","setIsButtonClick","updateMs","updateS","updateM","updateH","useCallback","clearInterval","run","useEffect","appClass","app","title__box","timerBoxClass","timer__box","spanBoxClass","span__box","displayBoxClass","display__box","groupButtonsBoxClass","setInterval","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.391b2eff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3-Mee\",\"title__box\":\"App_title__box__ImVoL\",\"timer__box\":\"App_timer__box__dXczP\",\"display__box\":\"App_display__box__3Uegw\",\"group-buttons__box\":\"App_group-buttons__box__7UuyD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"timer\":\"Timer_timer__2NioP\",\"timer__s\":\"Timer_timer__s__2x34x\",\"timer__ms\":\"Timer_timer__ms__2oi-e\",\"timer__active\":\"Timer_timer__active__2dJzm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ButtonClick_button__3voBK\",\"disabled\":\"ButtonClick_disabled__3DjO7\",\"clickMe\":\"ButtonClick_clickMe__oirtR\",\"isClick\":\"ButtonClick_isClick__3bee9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__22rm6\",\"span\":\"Title_span__2O1gT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__13r_k\",\"disabled\":\"Button_disabled__KTeT7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"count\":\"Count_count__2D5NN\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { MouseEvent } from 'react';\r\nimport s from './Title.module.scss'\r\n\r\ntype PropsType = {\r\n  title: string\r\n}\r\n\r\nexport const Title: React.FC<PropsType> = (props) => {\r\n\r\n  //Пропсы\r\n  const { title } = props\r\n\r\n  //Классы\r\n  let titleClass = [s.title].join(' ');\r\n  let spanClass = [s.span].join(' ');\r\n\r\n  //коллекция hover цветов\r\n  const collectionStyleColors = [\r\n    'lightgreen',\r\n    'lightsalmon',\r\n    'lightseagreen',\r\n    'lightcoral',\r\n    'khaki',\r\n    'indianred',\r\n    \"hotpink\",\r\n    'gold',\r\n    'fuchsia',\r\n    'dodgerblue',\r\n    'deepskyblue',\r\n    'darkorange',\r\n    'crimson'\r\n  ]\r\n\r\n  //Получение рандомных цветов\r\n  const randomColor = () => {\r\n    return collectionStyleColors[Math.floor(Math.random() * collectionStyleColors.length)]\r\n  }\r\n\r\n  //Выход указателя мышки из элемента\r\n  const handleMouseEnter = (e: MouseEvent<HTMLSpanElement>) => {\r\n    e.currentTarget.style.color = randomColor()\r\n  }\r\n\r\n  //Выход указателя мышки из элемента\r\n  const handleMouseLeave = (e: MouseEvent<HTMLSpanElement>) => {\r\n    e.currentTarget.style.color = '#fff'\r\n  }\r\n\r\n  //Строку из пропсов, разделяем по буквенно на массив, а затем возвращаем преобразованный массив. Каждую букву окутываем в span\r\n  const titleWatching = title.split('').map((i, inx) => {\r\n    if (i !== ' ') {\r\n      return <span\r\n        key={i + inx}\r\n        className={spanClass}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n      >{i}</span>\r\n    } else {\r\n      return i\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div className={titleClass}>\r\n      {\r\n        titleWatching\r\n      }\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport s from './Timer.module.scss'\r\nimport { TimeType } from '../App/App';\r\n\r\n\r\ntype PropsType = {\r\n  time: TimeType\r\n}\r\n\r\nexport const Timer: React.FC<PropsType> = (props) => {\r\n\r\n  const { time } = props\r\n\r\n\r\n  let timerSClass = [s.timer__s];\r\n  let timerMSClass = [s.timer__ms];\r\n  let timerClass = [s.timer];\r\n  if (time.ms === 0) timerClass.push(s.timer__active)\r\n\r\n  return (\r\n    <div className={timerClass.join(' ')}>\r\n      <div className={timerSClass.join(' ')}>\r\n        {\r\n          time.s >= 10 ? time.s : '0' + time.s\r\n        }\r\n      </div>\r\n      <div className={timerMSClass.join(' ')}>\r\n        {\r\n          time.ms >= 10 ? time.ms : '0' + time.ms\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport s from './ButtonClick.module.scss'\r\n\r\ntype PropsType = {\r\n  title: string\r\n  onChangeCount?: () => void\r\n  start?: () => void\r\n  disabled: boolean\r\n  clickMe?: boolean\r\n}\r\n\r\nexport const ButtonClick: React.FC<PropsType> = (props) => {\r\n\r\n  const { title, onChangeCount, start, disabled, clickMe } = props\r\n\r\n  const [isClick, setIsClick] = useState<boolean>(false)\r\n\r\n  let buttonClass = [s.button];\r\n  if (disabled) buttonClass.push(s.disabled)\r\n  if (clickMe) buttonClass.push(s.clickMe)\r\n  if(isClick) buttonClass.push(s.isClick)\r\n\r\n  const handleClick = () => {\r\n    onChangeCount && onChangeCount()\r\n    start && start()\r\n    setIsClick(false)\r\n  }\r\n\r\n  const handleOnMouseDown = () => {\r\n    setIsClick(true)\r\n  }\r\n\r\n  return (\r\n    <button\r\n      className={buttonClass.join(' ')}\r\n      onClick={handleClick}\r\n      disabled={disabled}\r\n      onMouseDown={handleOnMouseDown}\r\n    >\r\n      {\r\n        title\r\n      }\r\n    </button>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport s from './Count.module.scss'\r\n\r\n\r\ntype PropsType = {\r\n  count: number\r\n}\r\n\r\nexport const Count: React.FC<PropsType> = (props) => {\r\n\r\n  const { count } = props\r\n\r\n  let titleBoxClass = [s.count].join(' ');\r\n\r\n\r\n  return (\r\n    <div className={titleBoxClass}>\r\n      {\r\n        count\r\n      }\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport s from './Button.module.scss'\r\n\r\ntype PropsType = {\r\n  title: string\r\n  onChangeCount?: () => void\r\n  stop?: () => void\r\n  onClick?: () => void\r\n  disabled?: boolean\r\n}\r\n\r\nexport const Button: React.FC<PropsType> = (props) => {\r\n\r\n  const { title, onChangeCount, stop, onClick, disabled } = props\r\n\r\n  let buttonClass = [s.button];\r\n  if(disabled) buttonClass.push(s.disabled)\r\n\r\n  const handleClick = () => {\r\n    onChangeCount && onChangeCount()\r\n    stop && stop()\r\n    onClick && onClick()\r\n  }\r\n\r\n  return (\r\n    <button className={buttonClass.join(' ')} onClick={handleClick} disabled={disabled}>\r\n      {\r\n        title\r\n      }\r\n    </button>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport s from './App.module.scss'\r\nimport { Title } from '../Title/Title';\r\nimport { Timer } from '../Timer/Timer';\r\nimport { ButtonClick } from '../ButtonClick/ButtonClick';\r\nimport { Count } from '../Count/Count';\r\nimport { Button } from '../Button/Button';\r\n\r\nexport type TimeType = {\r\n  ms: number\r\n  s: number\r\n  m: number\r\n  h: number\r\n}\r\n\r\nconst timeDefault: TimeType = {\r\n  h: 0,\r\n  m: 0,\r\n  s: 0,\r\n  ms: 0\r\n}\r\n\r\nexport function App() {\r\n\r\n  const [maxValue, setMaxValue] = useState<number>(10)\r\n  const [time, setTime] = useState<TimeType>(timeDefault)\r\n  const [count, setCount] = useState<number>(0)\r\n  const [interv, setInterv] = useState<number>(0)\r\n  const [active, setActive] = useState<boolean>(true)\r\n  const [isButtonClick, setIsButtonClick] = useState<boolean>(true)\r\n\r\n\r\n  let updateMs = time.ms\r\n  let updateS = time.s\r\n  let updateM = time.m\r\n  let updateH = time.h\r\n\r\n  const changeCount = () => {\r\n    setCount(count + 1)\r\n    setIsButtonClick(false)\r\n  }\r\n\r\n  const resetCount = () => {\r\n    setTime({ ...time, s: 0, ms: 0 })\r\n    setCount(0)\r\n    setIsButtonClick(true)\r\n  }\r\n\r\n  const start = () => {\r\n    run();\r\n    setActive(false)\r\n    setInterv(window.setInterval(run, 10))\r\n  }\r\n  const stop = useCallback(() => {\r\n    window.clearInterval(interv)\r\n  }, [interv])\r\n\r\n\r\n  const run = () => {\r\n    if (updateM === 60) {\r\n      updateH++;\r\n      updateM = 0;\r\n    }\r\n    if (updateS === 60) {\r\n\r\n      updateM++;\r\n      updateS = 0;\r\n    }\r\n    if (updateMs === 100) {\r\n      updateS++;\r\n      updateMs = 0;\r\n    }\r\n    updateMs++;\r\n    return setTime({ h: updateH, m: updateM, s: updateS, ms: updateMs })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (time.s === maxValue) {\r\n      stop()\r\n      setActive(true)\r\n    }\r\n  }, [time.s, stop, maxValue])\r\n\r\n\r\n  let appClass = [s.app, 'app']\r\n  let titleBoxClass = [s.title__box]\r\n  let timerBoxClass = [s.timer__box]\r\n  let spanBoxClass = [s.span__box]\r\n  let displayBoxClass = [s.display__box]\r\n  let groupButtonsBoxClass = [s['group-buttons__box']]\r\n\r\n\r\n  return (\r\n    <div className={appClass.join(' ')}>\r\n      <div className=\"container\">\r\n        <div className={titleBoxClass.join(' ')}>\r\n          <Title title={'Click Me Game!'} />\r\n        </div>\r\n        <div className={timerBoxClass.join(' ')}>\r\n          <Timer time={time} />\r\n        </div>\r\n        <div className={spanBoxClass.join(' ')}>\r\n          <span>\r\n            {\r\n              `You have ${maxValue} seconds`\r\n            }\r\n          </span>\r\n        </div>\r\n        <div className={displayBoxClass.join(' ')}>\r\n          <Count count={count} />\r\n          <ButtonClick title={'Click'} onChangeCount={changeCount} disabled={active} clickMe={!active && isButtonClick} />\r\n        </div>\r\n        <div className={groupButtonsBoxClass.join(' ')}>\r\n          <Button title={'Reset'} onChangeCount={resetCount} stop={stop} disabled={!active || time.s === 0} />\r\n          <Button title={'New game'} onClick={start} disabled={!active || time.s > 0} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { App } from './components/App/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}